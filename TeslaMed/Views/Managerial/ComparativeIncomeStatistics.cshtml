@using TeslaMed.ViewModels
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@model List<OperatingCostsAndDiagnosticsViewModel>

@{
    ViewData["Title"] = Localizer["Title"];
    var data1 = Result(Model[0]);
    var data2 = Result(Model[1]);
}

<a asp-action="ShowStatisticsMainPage" class="btn btn-primary">@Localizer["BackToMainPage"]</a>
<div class="mt-3 mb-3">
    <form method="get" asp-action="@ViewContext.RouteData.Values["Action"]">
        <div class="row justify-content-lg-center ms-md-5 me-0">            
            <div class="col-lg-5">
                <div class="text-center mb-3">
                    <span class="border rounded-pill px-3 py-1">@Localizer["FirstTimePeriod"]</span>
                </div>
                <div class="row justify-content-center justify-content-xxl-around">
                    <div class="col-lg-5 d-flex">
                        <label class="mt-1 me-1" for="firstDate">@Localizer["From"]:</label>
                        <input type="date" name="firstDate" class="form-control" />
                    </div>
                    <div class="col-lg-5 d-flex">
                        <label class="mt-1 me-1" for="secondDate">@Localizer["To"]:</label>
                        <input type="date" name="secondDate" class="form-control" />
                    </div>
                </div>  
            </div>
            <div class="col-lg-5 mt-3 mt-lg-0">
                <div class="text-center mb-3">
                    <span class="border rounded-pill px-3 py-1">@Localizer["SecondTimePeriod"]</span>
                </div>
                <div class="row justify-content-center justify-content-xxl-around">
                    <div class="col-lg-5 d-flex">
                        <label class="mt-1 me-1" for="secondDate">@Localizer["From"]:</label>
                        <input type="date" name="thirdDate" class="form-control" />
                    </div>
                    <div class="col-lg-5 d-flex">
                        <label class="mt-1 me-1" for="secondDate">@Localizer["To"]:</label>
                        <input type="date" name="fourthDate" class="form-control" />
                    </div>
                </div> 
            </div>
            <div class="col-lg-1 d-flex justify-content-lg-start justify-content-center" >
                <button type="submit" class="p-0 border-0 bg-transparent" style="max-width: 38px" title="@Localizer["FilteringApplyReset"]">
                    <img style="max-height: 38px" src="~/images/icons8-search.svg"/>
                </button>
            </div>
        </div>
    </form>
</div>

<div class="row justify-content-around justify-content-lg-center ms-md-5 me-0" style="position: relative;">
    @for (int i = 0; i < 2; i++)
    {
        if (Model[i].Diagnostics.Count() != 0 || Model[i].OperatingCosts.Count() != 0)
        {
            <div class="col-5 text-center"><canvas id="chart_@i"></canvas></div>
        }
        else
        {
            <div class="col-5 text-center">@Localizer["EmptyData"]</div>
        }
    }
    <div class="col-12 col-lg-1"></div>
</div>

@functions{
    private List<double> Result(OperatingCostsAndDiagnosticsViewModel model)
    {
        var result = new List<double>{ 0, 0, 0};
        foreach (var diag in model.Diagnostics)
            result[1] += Convert.ToDouble(diag.CashlessPayment) + Convert.ToDouble(diag.CashPayment);
        foreach (var cost in model.OperatingCosts)
            result[2] += Convert.ToDouble(cost.TotalAmount);
        result[0] = ((result[1] - result[2]) > 0 ? (result[1] - result[2]) : 0);
        return result;
    }
}

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
<script>
const data1 = {
  labels: [
    '@Localizer["TotalProfit"] @((data1[0] * (100 / (data1[0] + data1[1] + data1[2]))).ToString(data1[0] > 0 ? "#.#" : null))%',
    '@Localizer["TotalIncome"] @((data1[1] * (100 / (data1[0] + data1[1] + data1[2]))).ToString(data1[1] > 0 ? "#.#" : null))%',
    '@Localizer["TotalСonsumption"] @((data1[2] * (100 / (data1[0] + data1[1] + data1[2]))).ToString(data1[2] > 0 ? "#.#" : null))%'
  ],
  datasets: [{
    label: '@Localizer["FirstTimePeriod"]',
    data: [@data1[0], @data1[1], @data1[2]],
    backgroundColor: [
      'rgb(45, 140, 186)',
      'rgb(107, 229, 234)',      
      'rgb(66, 183, 214)'
    ],
    hoverOffset: 4
  }]
};

const data2 = {
  labels: [
    '@Localizer["TotalProfit"] @((data2[0] * (100 / (data2[0] + data2[1] + data2[2]))).ToString(data2[0] > 0 ? "#.#" : null))%',
    '@Localizer["TotalIncome"] @((data2[1] * (100 / (data2[0] + data2[1] + data2[2]))).ToString(data2[1] > 1 ? "#.#" : null))%',
    '@Localizer["TotalСonsumption"] @((data2[2] * (100 / (data2[0] + data2[1] + data2[2]))).ToString(data2[2] > 2 ? "#.#" : null))%'
  ],
  datasets: [{
    label: '@Localizer["SecondTimePeriod"]',
    data: [@data2[0], @data2[1], @data2[2]],
    backgroundColor: [
      'rgb(45, 140, 186)',
      'rgb(107, 229, 234)',      
      'rgb(66, 183, 214)'
    ],
    hoverOffset: 4
  }]
};

new Chart(
    document.getElementById('chart_0'),
    {
        type: 'pie',
        data: data1,
    });

new Chart(
    document.getElementById('chart_1'),
    {
        type: 'pie',
        data: data2,
    });
</script>