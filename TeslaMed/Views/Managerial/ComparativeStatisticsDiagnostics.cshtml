@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@model List<IQueryable<Diagnostics>>

@{
    ViewData["Title"] = Localizer["Title"];
    double totalProfitData1 = 0;
    double totalProfitData2 = 0;
    var data1 = Result(Model[0], ref totalProfitData1);
    var data2 = Result(Model[1], ref totalProfitData2);    
}

<a asp-action="ShowStatisticsMainPage" class="btn btn-primary">@Localizer["BackToMainPage"]</a>
<div class="mt-3 mb-3">
    <form method="get" asp-action="@ViewContext.RouteData.Values["Action"]">
        <div class="row justify-content-lg-center ms-md-5 me-0">            
            <div class="col-lg-5">
                <div class="text-center mb-3">
                    <span class="border rounded-pill px-3 py-1">@Localizer["FirstTimePeriod"]</span>
                </div>
                <div class="row justify-content-center justify-content-xxl-around">
                    <div class="col-lg-5 d-flex">
                        <label class="mt-1 me-1" for="firstDate">@Localizer["From"]:</label>
                        <input type="date" name="firstDate" class="form-control" />
                    </div>
                    <div class="col-lg-5 d-flex">
                        <label class="mt-1 me-1" for="secondDate">@Localizer["To"]:</label>
                        <input type="date" name="secondDate" class="form-control" />
                    </div>
                </div>  
            </div>
            <div class="col-lg-5 mt-3 mt-lg-0">
                <div class="text-center mb-3">
                    <span class="border rounded-pill px-3 py-1">@Localizer["SecondTimePeriod"]</span>
                </div>
                <div class="row justify-content-center justify-content-xxl-around">
                    <div class="col-lg-5 d-flex">
                        <label class="mt-1 me-1" for="secondDate">@Localizer["From"]:</label>
                        <input type="date" name="thirdDate" class="form-control" />
                    </div>
                    <div class="col-lg-5 d-flex">
                        <label class="mt-1 me-1" for="secondDate">@Localizer["To"]:</label>
                        <input type="date" name="fourthDate" class="form-control" />
                    </div>
                </div> 
            </div>
            <div class="col-lg-1 d-flex justify-content-lg-start justify-content-center" >
                <button type="submit" class="p-0 border-0 bg-transparent" style="max-width: 38px" title="@Localizer["FilteringApplyReset"]">
                    <img style="max-height: 38px" src="~/images/icons8-search.svg"/>
                </button>
            </div>
        </div>
    </form>
</div>

<div class="row justify-content-around justify-content-lg-center ms-md-5 me-0" style="position: relative;">
    @for (int i = 0; i < 2; i++)
    {
        if (Model[i].Count() != 0)
        {
            <div class="col-5 text-center"><canvas id="chart_@i"></canvas></div>
        }
        else
        {
            <div class="col-5 text-center">@Localizer["EmptyData"]</div>
        }
    }
    <div class="col-12 col-lg-1"></div>
</div>

@functions{
    private List<Tuple<string, double>> Result(IQueryable<Diagnostics> model, ref double totalProfit)
    {
        double profit = 0;
        var result = new List<Tuple<string, double>>();
        foreach (var method in ViewBag.ResearchMethods)
        {
            var methodAndPayment = new Tuple<string, double>( default, 0 );
            foreach (var diag in model)
                if (diag.TypesOfDiagnostics.FirstOrDefault().ResearchMethod == method)
                    methodAndPayment = Tuple.Create($"{method.Name}", methodAndPayment.Item2 + (double)diag.CashlessPayment + (double)diag.CashPayment);
            result.Add(methodAndPayment);
        }
        result.ForEach(x => profit += x.Item2);
        totalProfit = profit;
        return result;
    }
}

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
<script>
const data1 = {
    labels: [
        @foreach (var item in data1)
        {
            @:'@item.Item1 @(((100 / totalProfitData1) * item.Item2).ToString(item.Item2 > 0 ? "#.#" : null))%',
        }
    ],
    datasets: [{
        label: '@Localizer["FirstTimePeriod"]',
        data: [
            @foreach (var item in data1)
            {
                @:@item.Item2,
            }
        ],
        backgroundColor: [
          'rgb(45, 140, 186)',
          'rgb(107, 229, 234)',      
          'rgb(66, 183, 214)',
          'rgb(64, 117, 217)',
          'rgb(79, 202, 162)',
          'rgb(94, 173, 187)',
          'rgb(52, 228, 189)',
          'rgb(45, 107, 236)',
          'rgb(108, 172, 150)'
        ],
        hoverOffset: 4
    }]
};

const data2 = {
  labels: [
    @foreach (var item in data2)
    {
        @:'@item.Item1 @(((100 / totalProfitData2) * item.Item2).ToString(item.Item2 > 0 ? "#.#" : null))%',
    }
  ],
  datasets: [{
    label: '@Localizer["SecondTimePeriod"]',
    data: [
        @foreach (var item in data2)
        {
            @:@item.Item2,
        }
    ],
    backgroundColor: [
      'rgb(45, 140, 186)',
      'rgb(107, 229, 234)',      
      'rgb(66, 183, 214)',
      'rgb(64, 117, 217)',
      'rgb(79, 202, 162)',
      'rgb(94, 173, 187)',
      'rgb(52, 228, 189)',
      'rgb(45, 107, 236)',
      'rgb(108, 172, 150)'
    ],
    hoverOffset: 4
  }]
};

new Chart(
    document.getElementById('chart_0'),
    {
        type: 'pie',
        data: data1,
    });

new Chart(
    document.getElementById('chart_1'),
    {
        type: 'pie',
        data: data2,
    });
</script>